import android.app.Activity
import io.reactivex.Observable
import io.reactivex.ObservableEmitter
import io.reactivex.android.schedulers.AndroidSchedulers
import javax.inject.Inject


open class Book {
    var isbn: String? = null
    var title: String? = null
    var author: String? = null
}

class ComicBook : Book() {
    var marvelUniverse: Boolean? = null
}

/**
 * Repository interface for fetch or save book from network or database datasource
 */
interface DAOInterface {

    fun fetchBooks(): Array<Book>
    fun fetchComicBooks(): Array<ComicBook>
    fun saveBooks(items: Array<Book>)
}

class BookRepository(var db: DbDatasource, var network: NetworkDatasource) {

    fun fetchBooks() = Observable.create { subscriber: ObservableEmitter<Array<Book>> ->
        subscriber.onNext(network.fetchBooks())
        if (Network.isFetching) {
            subscriber.onNext(db.fetchBooks())
        }
    }

    fun fetchComicBooks() = Observable.create { subscriber: ObservableEmitter<Array<ComicBook>> ->
        subscriber.onNext(network.fetchComicBooks())
        if (Network.isFetching) {
            subscriber.onNext(db.fetchComicBooks())
        }
    }

    fun saveBooks(items: Array<Book>) {
        db.saveBooks(items)
    }

}

class DbDatasource : DAOInterface {

    override fun fetchBooks(): Array<Book> {
        // Fetch from DB
        return arrayOf()
    }

    override fun fetchComicBooks(): Array<ComicBook> {
        // fetch only comic books from db
        return arrayOf()
    }

    override fun saveBooks(items: Array<Book>) {
        // Save on DB
    }
}


class NetworkDatasource : DAOInterface {

    override fun fetchBooks(): Array<Book> {
        // Fetch from DB
        return Network.getBooks()
    }

    override fun fetchComicBooks(): Array<ComicBook> {
        // fetch only comic books from db
        return Network.getComicBooks()
    }

    override fun saveBooks(items: Array<Book>) {
        // Save on DB
    }
}


// singleton object for network
object Network {

    var isFetching: Boolean = false

    // Utils
    fun getBooks(): Array<Book> {
        // ...
        return arrayOf()
    }

    fun getComicBooks(): Array<ComicBook> {
        // ...
        return arrayOf()
    }
}

class MainActivity : Activity() {

    @Inject
    lateinit var repo: BookRepository

    var data: Array<Book> = emptyArray()

    override fun onStart() {
        super.onStart()

        repo.fetchBooks()
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe {
                data = it
            }

        repo.saveBooks(items = data)


        // Reload Activity
        // ...
    }
    // Activity Declaration
    // ...
}